
vrs_cv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002364  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080024a4  080024a4  000124a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  080024b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000001c  080024d4  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000003c  080024d4  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004b11  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ee6  00000000  00000000  00024b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000608  00000000  00000000  00025a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000560  00000000  00000000  00026048  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000212c  00000000  00000000  000265a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000020c5  00000000  00000000  000286d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002a799  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000018d8  00000000  00000000  0002a818  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000001c 	.word	0x2000001c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800248c 	.word	0x0800248c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000020 	.word	0x20000020
 800017c:	0800248c 	.word	0x0800248c

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__aeabi_d2f>:
 8000914:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000918:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800091c:	bf24      	itt	cs
 800091e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000922:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000926:	d90d      	bls.n	8000944 <__aeabi_d2f+0x30>
 8000928:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000930:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000934:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000938:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800093c:	bf08      	it	eq
 800093e:	f020 0001 	biceq.w	r0, r0, #1
 8000942:	4770      	bx	lr
 8000944:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000948:	d121      	bne.n	800098e <__aeabi_d2f+0x7a>
 800094a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800094e:	bfbc      	itt	lt
 8000950:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000954:	4770      	bxlt	lr
 8000956:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800095e:	f1c2 0218 	rsb	r2, r2, #24
 8000962:	f1c2 0c20 	rsb	ip, r2, #32
 8000966:	fa10 f30c 	lsls.w	r3, r0, ip
 800096a:	fa20 f002 	lsr.w	r0, r0, r2
 800096e:	bf18      	it	ne
 8000970:	f040 0001 	orrne.w	r0, r0, #1
 8000974:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000978:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800097c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000980:	ea40 000c 	orr.w	r0, r0, ip
 8000984:	fa23 f302 	lsr.w	r3, r3, r2
 8000988:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800098c:	e7cc      	b.n	8000928 <__aeabi_d2f+0x14>
 800098e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000992:	d107      	bne.n	80009a4 <__aeabi_d2f+0x90>
 8000994:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000998:	bf1e      	ittt	ne
 800099a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800099e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009a2:	4770      	bxne	lr
 80009a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_frsub>:
 80009b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b8:	e002      	b.n	80009c0 <__addsf3>
 80009ba:	bf00      	nop

080009bc <__aeabi_fsub>:
 80009bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c0 <__addsf3>:
 80009c0:	0042      	lsls	r2, r0, #1
 80009c2:	bf1f      	itttt	ne
 80009c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c8:	ea92 0f03 	teqne	r2, r3
 80009cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d4:	d06a      	beq.n	8000aac <__addsf3+0xec>
 80009d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009de:	bfc1      	itttt	gt
 80009e0:	18d2      	addgt	r2, r2, r3
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	4048      	eorgt	r0, r1
 80009e6:	4041      	eorgt	r1, r0
 80009e8:	bfb8      	it	lt
 80009ea:	425b      	neglt	r3, r3
 80009ec:	2b19      	cmp	r3, #25
 80009ee:	bf88      	it	hi
 80009f0:	4770      	bxhi	lr
 80009f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009fe:	bf18      	it	ne
 8000a00:	4240      	negne	r0, r0
 8000a02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a0e:	bf18      	it	ne
 8000a10:	4249      	negne	r1, r1
 8000a12:	ea92 0f03 	teq	r2, r3
 8000a16:	d03f      	beq.n	8000a98 <__addsf3+0xd8>
 8000a18:	f1a2 0201 	sub.w	r2, r2, #1
 8000a1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a20:	eb10 000c 	adds.w	r0, r0, ip
 8000a24:	f1c3 0320 	rsb	r3, r3, #32
 8000a28:	fa01 f103 	lsl.w	r1, r1, r3
 8000a2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a30:	d502      	bpl.n	8000a38 <__addsf3+0x78>
 8000a32:	4249      	negs	r1, r1
 8000a34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a3c:	d313      	bcc.n	8000a66 <__addsf3+0xa6>
 8000a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a42:	d306      	bcc.n	8000a52 <__addsf3+0x92>
 8000a44:	0840      	lsrs	r0, r0, #1
 8000a46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a4a:	f102 0201 	add.w	r2, r2, #1
 8000a4e:	2afe      	cmp	r2, #254	; 0xfe
 8000a50:	d251      	bcs.n	8000af6 <__addsf3+0x136>
 8000a52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5a:	bf08      	it	eq
 8000a5c:	f020 0001 	biceq.w	r0, r0, #1
 8000a60:	ea40 0003 	orr.w	r0, r0, r3
 8000a64:	4770      	bx	lr
 8000a66:	0049      	lsls	r1, r1, #1
 8000a68:	eb40 0000 	adc.w	r0, r0, r0
 8000a6c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a70:	f1a2 0201 	sub.w	r2, r2, #1
 8000a74:	d1ed      	bne.n	8000a52 <__addsf3+0x92>
 8000a76:	fab0 fc80 	clz	ip, r0
 8000a7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a86:	bfaa      	itet	ge
 8000a88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a8c:	4252      	neglt	r2, r2
 8000a8e:	4318      	orrge	r0, r3
 8000a90:	bfbc      	itt	lt
 8000a92:	40d0      	lsrlt	r0, r2
 8000a94:	4318      	orrlt	r0, r3
 8000a96:	4770      	bx	lr
 8000a98:	f092 0f00 	teq	r2, #0
 8000a9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa0:	bf06      	itte	eq
 8000aa2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aa6:	3201      	addeq	r2, #1
 8000aa8:	3b01      	subne	r3, #1
 8000aaa:	e7b5      	b.n	8000a18 <__addsf3+0x58>
 8000aac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aba:	d021      	beq.n	8000b00 <__addsf3+0x140>
 8000abc:	ea92 0f03 	teq	r2, r3
 8000ac0:	d004      	beq.n	8000acc <__addsf3+0x10c>
 8000ac2:	f092 0f00 	teq	r2, #0
 8000ac6:	bf08      	it	eq
 8000ac8:	4608      	moveq	r0, r1
 8000aca:	4770      	bx	lr
 8000acc:	ea90 0f01 	teq	r0, r1
 8000ad0:	bf1c      	itt	ne
 8000ad2:	2000      	movne	r0, #0
 8000ad4:	4770      	bxne	lr
 8000ad6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ada:	d104      	bne.n	8000ae6 <__addsf3+0x126>
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	bf28      	it	cs
 8000ae0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae4:	4770      	bx	lr
 8000ae6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aea:	bf3c      	itt	cc
 8000aec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bxcc	lr
 8000af2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	4770      	bx	lr
 8000b00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b04:	bf16      	itet	ne
 8000b06:	4608      	movne	r0, r1
 8000b08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b0c:	4601      	movne	r1, r0
 8000b0e:	0242      	lsls	r2, r0, #9
 8000b10:	bf06      	itte	eq
 8000b12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b16:	ea90 0f01 	teqeq	r0, r1
 8000b1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_ui2f>:
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e004      	b.n	8000b30 <__aeabi_i2f+0x8>
 8000b26:	bf00      	nop

08000b28 <__aeabi_i2f>:
 8000b28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b2c:	bf48      	it	mi
 8000b2e:	4240      	negmi	r0, r0
 8000b30:	ea5f 0c00 	movs.w	ip, r0
 8000b34:	bf08      	it	eq
 8000b36:	4770      	bxeq	lr
 8000b38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	e01c      	b.n	8000b7e <__aeabi_l2f+0x2a>

08000b44 <__aeabi_ul2f>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	e00a      	b.n	8000b68 <__aeabi_l2f+0x14>
 8000b52:	bf00      	nop

08000b54 <__aeabi_l2f>:
 8000b54:	ea50 0201 	orrs.w	r2, r0, r1
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__aeabi_l2f+0x14>
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	ea5f 0c01 	movs.w	ip, r1
 8000b6c:	bf02      	ittt	eq
 8000b6e:	4684      	moveq	ip, r0
 8000b70:	4601      	moveq	r1, r0
 8000b72:	2000      	moveq	r0, #0
 8000b74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b78:	bf08      	it	eq
 8000b7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b82:	fabc f28c 	clz	r2, ip
 8000b86:	3a08      	subs	r2, #8
 8000b88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b8c:	db10      	blt.n	8000bb0 <__aeabi_l2f+0x5c>
 8000b8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b92:	4463      	add	r3, ip
 8000b94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b98:	f1c2 0220 	rsb	r2, r2, #32
 8000b9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba4:	eb43 0002 	adc.w	r0, r3, r2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f102 0220 	add.w	r2, r2, #32
 8000bb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb8:	f1c2 0220 	rsb	r2, r2, #32
 8000bbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc4:	eb43 0002 	adc.w	r0, r3, r2
 8000bc8:	bf08      	it	eq
 8000bca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_fmul>:
 8000bd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd8:	bf1e      	ittt	ne
 8000bda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bde:	ea92 0f0c 	teqne	r2, ip
 8000be2:	ea93 0f0c 	teqne	r3, ip
 8000be6:	d06f      	beq.n	8000cc8 <__aeabi_fmul+0xf8>
 8000be8:	441a      	add	r2, r3
 8000bea:	ea80 0c01 	eor.w	ip, r0, r1
 8000bee:	0240      	lsls	r0, r0, #9
 8000bf0:	bf18      	it	ne
 8000bf2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bf6:	d01e      	beq.n	8000c36 <__aeabi_fmul+0x66>
 8000bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c04:	fba0 3101 	umull	r3, r1, r0, r1
 8000c08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c0c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c10:	bf3e      	ittt	cc
 8000c12:	0049      	lslcc	r1, r1, #1
 8000c14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c18:	005b      	lslcc	r3, r3, #1
 8000c1a:	ea40 0001 	orr.w	r0, r0, r1
 8000c1e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c22:	2afd      	cmp	r2, #253	; 0xfd
 8000c24:	d81d      	bhi.n	8000c62 <__aeabi_fmul+0x92>
 8000c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	4770      	bx	lr
 8000c36:	f090 0f00 	teq	r0, #0
 8000c3a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c3e:	bf08      	it	eq
 8000c40:	0249      	lsleq	r1, r1, #9
 8000c42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c4a:	3a7f      	subs	r2, #127	; 0x7f
 8000c4c:	bfc2      	ittt	gt
 8000c4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c56:	4770      	bxgt	lr
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	dc5d      	bgt.n	8000d20 <__aeabi_fmul+0x150>
 8000c64:	f112 0f19 	cmn.w	r2, #25
 8000c68:	bfdc      	itt	le
 8000c6a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c6e:	4770      	bxle	lr
 8000c70:	f1c2 0200 	rsb	r2, r2, #0
 8000c74:	0041      	lsls	r1, r0, #1
 8000c76:	fa21 f102 	lsr.w	r1, r1, r2
 8000c7a:	f1c2 0220 	rsb	r2, r2, #32
 8000c7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c86:	f140 0000 	adc.w	r0, r0, #0
 8000c8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c8e:	bf08      	it	eq
 8000c90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c94:	4770      	bx	lr
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0040      	lsleq	r0, r0, #1
 8000ca2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ca6:	3a01      	subeq	r2, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xce>
 8000caa:	ea40 000c 	orr.w	r0, r0, ip
 8000cae:	f093 0f00 	teq	r3, #0
 8000cb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0049      	lsleq	r1, r1, #1
 8000cba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cbe:	3b01      	subeq	r3, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xe6>
 8000cc2:	ea41 010c 	orr.w	r1, r1, ip
 8000cc6:	e78f      	b.n	8000be8 <__aeabi_fmul+0x18>
 8000cc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ccc:	ea92 0f0c 	teq	r2, ip
 8000cd0:	bf18      	it	ne
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d00a      	beq.n	8000cee <__aeabi_fmul+0x11e>
 8000cd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cdc:	bf18      	it	ne
 8000cde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ce2:	d1d8      	bne.n	8000c96 <__aeabi_fmul+0xc6>
 8000ce4:	ea80 0001 	eor.w	r0, r0, r1
 8000ce8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	bf17      	itett	ne
 8000cf4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf8:	4608      	moveq	r0, r1
 8000cfa:	f091 0f00 	teqne	r1, #0
 8000cfe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d02:	d014      	beq.n	8000d2e <__aeabi_fmul+0x15e>
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	d101      	bne.n	8000d0e <__aeabi_fmul+0x13e>
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	d10f      	bne.n	8000d2e <__aeabi_fmul+0x15e>
 8000d0e:	ea93 0f0c 	teq	r3, ip
 8000d12:	d103      	bne.n	8000d1c <__aeabi_fmul+0x14c>
 8000d14:	024b      	lsls	r3, r1, #9
 8000d16:	bf18      	it	ne
 8000d18:	4608      	movne	r0, r1
 8000d1a:	d108      	bne.n	8000d2e <__aeabi_fmul+0x15e>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bx	lr
 8000d2e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_fdiv>:
 8000d38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d40:	bf1e      	ittt	ne
 8000d42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d46:	ea92 0f0c 	teqne	r2, ip
 8000d4a:	ea93 0f0c 	teqne	r3, ip
 8000d4e:	d069      	beq.n	8000e24 <__aeabi_fdiv+0xec>
 8000d50:	eba2 0203 	sub.w	r2, r2, r3
 8000d54:	ea80 0c01 	eor.w	ip, r0, r1
 8000d58:	0249      	lsls	r1, r1, #9
 8000d5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d5e:	d037      	beq.n	8000dd0 <__aeabi_fdiv+0x98>
 8000d60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	428b      	cmp	r3, r1
 8000d72:	bf38      	it	cc
 8000d74:	005b      	lslcc	r3, r3, #1
 8000d76:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d7a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	bf24      	itt	cs
 8000d82:	1a5b      	subcs	r3, r3, r1
 8000d84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d8c:	bf24      	itt	cs
 8000d8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d9a:	bf24      	itt	cs
 8000d9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000da0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da8:	bf24      	itt	cs
 8000daa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	bf18      	it	ne
 8000db6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dba:	d1e0      	bne.n	8000d7e <__aeabi_fdiv+0x46>
 8000dbc:	2afd      	cmp	r2, #253	; 0xfd
 8000dbe:	f63f af50 	bhi.w	8000c62 <__aeabi_fmul+0x92>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc8:	bf08      	it	eq
 8000dca:	f020 0001 	biceq.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd8:	327f      	adds	r2, #127	; 0x7f
 8000dda:	bfc2      	ittt	gt
 8000ddc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000de0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de4:	4770      	bxgt	lr
 8000de6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	3a01      	subs	r2, #1
 8000df0:	e737      	b.n	8000c62 <__aeabi_fmul+0x92>
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0040      	lsleq	r0, r0, #1
 8000dfe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e02:	3a01      	subeq	r2, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xc2>
 8000e06:	ea40 000c 	orr.w	r0, r0, ip
 8000e0a:	f093 0f00 	teq	r3, #0
 8000e0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0049      	lsleq	r1, r1, #1
 8000e16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1a:	3b01      	subeq	r3, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xda>
 8000e1e:	ea41 010c 	orr.w	r1, r1, ip
 8000e22:	e795      	b.n	8000d50 <__aeabi_fdiv+0x18>
 8000e24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d108      	bne.n	8000e40 <__aeabi_fdiv+0x108>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	f47f af7d 	bne.w	8000d2e <__aeabi_fmul+0x15e>
 8000e34:	ea93 0f0c 	teq	r3, ip
 8000e38:	f47f af70 	bne.w	8000d1c <__aeabi_fmul+0x14c>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e776      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e40:	ea93 0f0c 	teq	r3, ip
 8000e44:	d104      	bne.n	8000e50 <__aeabi_fdiv+0x118>
 8000e46:	024b      	lsls	r3, r1, #9
 8000e48:	f43f af4c 	beq.w	8000ce4 <__aeabi_fmul+0x114>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e76e      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1ca      	bne.n	8000df2 <__aeabi_fdiv+0xba>
 8000e5c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e60:	f47f af5c 	bne.w	8000d1c <__aeabi_fmul+0x14c>
 8000e64:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e68:	f47f af3c 	bne.w	8000ce4 <__aeabi_fmul+0x114>
 8000e6c:	e75f      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_f2iz>:
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e78:	d30f      	bcc.n	8000e9a <__aeabi_f2iz+0x2a>
 8000e7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e82:	d90d      	bls.n	8000ea0 <__aeabi_f2iz+0x30>
 8000e84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e8c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e90:	fa23 f002 	lsr.w	r0, r3, r2
 8000e94:	bf18      	it	ne
 8000e96:	4240      	negne	r0, r0
 8000e98:	4770      	bx	lr
 8000e9a:	f04f 0000 	mov.w	r0, #0
 8000e9e:	4770      	bx	lr
 8000ea0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_f2iz+0x3a>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d105      	bne.n	8000eb6 <__aeabi_f2iz+0x46>
 8000eaa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	bf08      	it	eq
 8000eb0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	4770      	bx	lr

08000ebc <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <NVIC_PriorityGroupConfig+0x20>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60d3      	str	r3, [r2, #12]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	2300      	movs	r3, #0
 8000eee:	73bb      	strb	r3, [r7, #14]
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	78db      	ldrb	r3, [r3, #3]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d038      	beq.n	8000f6e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000efc:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <NVIC_Init+0xb8>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f1c3 0304 	rsb	r3, r3, #4
 8000f10:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000f12:	7b7a      	ldrb	r2, [r7, #13]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	fa42 f303 	asr.w	r3, r2, r3
 8000f1a:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	461a      	mov	r2, r3
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	789a      	ldrb	r2, [r3, #2]
 8000f2e:	7b7b      	ldrb	r3, [r7, #13]
 8000f30:	4013      	ands	r3, r2
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f40:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <NVIC_Init+0xbc>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <NVIC_Init+0xbc>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f68:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000f6c:	e00f      	b.n	8000f8e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f6e:	490b      	ldr	r1, [pc, #44]	; (8000f9c <NVIC_Init+0xbc>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	095b      	lsrs	r3, r3, #5
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	f003 031f 	and.w	r3, r3, #31
 8000f82:	2201      	movs	r2, #1
 8000f84:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f86:	f100 0320 	add.w	r3, r0, #32
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fc2:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	791b      	ldrb	r3, [r3, #4]
 8000fc8:	021a      	lsls	r2, r3, #8
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <ADC_Init+0xa4>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000ff8:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	795b      	ldrb	r3, [r3, #5]
 8000ffe:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8001000:	4313      	orrs	r3, r2
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 800101a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	7d1b      	ldrb	r3, [r3, #20]
 8001020:	3b01      	subs	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	7afb      	ldrb	r3, [r7, #11]
 8001026:	4313      	orrs	r3, r2
 8001028:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800102a:	7afb      	ldrb	r3, [r7, #11]
 800102c:	051b      	lsls	r3, r3, #20
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	c0fff7fd 	.word	0xc0fff7fd

08001048 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800106e:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	751a      	strb	r2, [r3, #20]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80010a6:	e005      	b.n	80010b4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f023 0201 	bic.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
  }
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	70fb      	strb	r3, [r7, #3]
 80010d2:	460b      	mov	r3, r1
 80010d4:	70bb      	strb	r3, [r7, #2]
 80010d6:	4613      	mov	r3, r2
 80010d8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2b1d      	cmp	r3, #29
 80010e6:	d923      	bls.n	8001130 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ec:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	f1a3 021e 	sub.w	r2, r3, #30
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	2207      	movs	r2, #7
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	43db      	mvns	r3, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 800110c:	7879      	ldrb	r1, [r7, #1]
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	f1a3 021e 	sub.w	r2, r3, #30
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	4313      	orrs	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	65da      	str	r2, [r3, #92]	; 0x5c
 800112e:	e06c      	b.n	800120a <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b13      	cmp	r3, #19
 8001134:	d923      	bls.n	800117e <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	f1a3 0214 	sub.w	r2, r3, #20
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	2207      	movs	r2, #7
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	43db      	mvns	r3, r3
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4013      	ands	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 800115a:	7879      	ldrb	r1, [r7, #1]
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	f1a3 0214 	sub.w	r2, r3, #20
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	e045      	b.n	800120a <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	2b09      	cmp	r3, #9
 8001182:	d923      	bls.n	80011cc <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	f1a3 020a 	sub.w	r2, r3, #10
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80011a8:	7879      	ldrb	r1, [r7, #1]
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	f1a3 020a 	sub.w	r2, r3, #10
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	e01e      	b.n	800120a <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 80011d2:	78fa      	ldrb	r2, [r7, #3]
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	2207      	movs	r2, #7
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80011ec:	7879      	ldrb	r1, [r7, #1]
 80011ee:	78fa      	ldrb	r2, [r7, #3]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	4313      	orrs	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800120a:	78bb      	ldrb	r3, [r7, #2]
 800120c:	2b06      	cmp	r3, #6
 800120e:	d821      	bhi.n	8001254 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 8001216:	78bb      	ldrb	r3, [r7, #2]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	221f      	movs	r2, #31
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	43db      	mvns	r3, r3
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8001232:	78f9      	ldrb	r1, [r7, #3]
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	1e5a      	subs	r2, r3, #1
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001252:	e095      	b.n	8001380 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8001254:	78bb      	ldrb	r3, [r7, #2]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d821      	bhi.n	800129e <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8001260:	78bb      	ldrb	r3, [r7, #2]
 8001262:	1fda      	subs	r2, r3, #7
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	221f      	movs	r2, #31
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	43db      	mvns	r3, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800127c:	78f9      	ldrb	r1, [r7, #3]
 800127e:	78bb      	ldrb	r3, [r7, #2]
 8001280:	1fda      	subs	r2, r3, #7
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800129c:	e070      	b.n	8001380 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 800129e:	78bb      	ldrb	r3, [r7, #2]
 80012a0:	2b12      	cmp	r3, #18
 80012a2:	d823      	bhi.n	80012ec <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 80012aa:	78bb      	ldrb	r3, [r7, #2]
 80012ac:	f1a3 020d 	sub.w	r2, r3, #13
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	221f      	movs	r2, #31
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80012c8:	78f9      	ldrb	r1, [r7, #3]
 80012ca:	78bb      	ldrb	r3, [r7, #2]
 80012cc:	f1a3 020d 	sub.w	r2, r3, #13
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80012ea:	e049      	b.n	8001380 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 80012ec:	78bb      	ldrb	r3, [r7, #2]
 80012ee:	2b18      	cmp	r3, #24
 80012f0:	d823      	bhi.n	800133a <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 80012f8:	78bb      	ldrb	r3, [r7, #2]
 80012fa:	f1a3 0213 	sub.w	r2, r3, #19
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	221f      	movs	r2, #31
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	43db      	mvns	r3, r3
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8001316:	78f9      	ldrb	r1, [r7, #3]
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	f1a3 0213 	sub.w	r2, r3, #19
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001338:	e022      	b.n	8001380 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8001340:	78bb      	ldrb	r3, [r7, #2]
 8001342:	f1a3 0219 	sub.w	r2, r3, #25
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	221f      	movs	r2, #31
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	43db      	mvns	r3, r3
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 800135e:	78f9      	ldrb	r1, [r7, #3]
 8001360:	78bb      	ldrb	r3, [r7, #2]
 8001362:	f1a3 0219 	sub.w	r2, r3, #25
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 80013c6:	2201      	movs	r2, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 80013e2:	e006      	b.n	80013f2 <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	401a      	ands	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	605a      	str	r2, [r3, #4]
  }
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e001      	b.n	8001422 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop

08001430 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e07e      	b.n	800154a <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800144c:	2201      	movs	r2, #1
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d16d      	bne.n	8001544 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2103      	movs	r1, #3
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	401a      	ands	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	791b      	ldrb	r3, [r3, #4]
 8001486:	4619      	mov	r1, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d003      	beq.n	80014a6 <GPIO_Init+0x76>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	791b      	ldrb	r3, [r3, #4]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d136      	bne.n	8001514 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2103      	movs	r1, #3
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	795b      	ldrb	r3, [r3, #5]
 80014c4:	4619      	mov	r1, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	889b      	ldrh	r3, [r3, #4]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	2101      	movs	r1, #1
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4013      	ands	r3, r2
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	889b      	ldrh	r3, [r3, #4]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	799b      	ldrb	r3, [r3, #6]
 80014fe:	4619      	mov	r1, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	b29b      	uxth	r3, r3
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21b      	sxth	r3, r3
 800150e:	b29a      	uxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	b29b      	uxth	r3, r3
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2103      	movs	r1, #3
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	79db      	ldrb	r3, [r3, #7]
 8001534:	4619      	mov	r1, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	f67f af7d 	bls.w	800144c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001574:	787a      	ldrb	r2, [r7, #1]
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	b29b      	uxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3208      	adds	r2, #8
 8001598:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	210f      	movs	r1, #15
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	ea02 0103 	and.w	r1, r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f100 0208 	add.w	r2, r0, #8
 80015b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	08db      	lsrs	r3, r3, #3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <RCC_HSICmd+0x1c>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	42470000 	.word	0x42470000

0800160c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800162c:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <RCC_GetClocksFreq+0x1a0>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d865      	bhi.n	8001708 <RCC_GetClocksFreq+0xfc>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <RCC_GetClocksFreq+0x38>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001679 	.word	0x08001679
 8001648:	08001709 	.word	0x08001709
 800164c:	08001709 	.word	0x08001709
 8001650:	08001709 	.word	0x08001709
 8001654:	08001699 	.word	0x08001699
 8001658:	08001709 	.word	0x08001709
 800165c:	08001709 	.word	0x08001709
 8001660:	08001709 	.word	0x08001709
 8001664:	080016a1 	.word	0x080016a1
 8001668:	08001709 	.word	0x08001709
 800166c:	08001709 	.word	0x08001709
 8001670:	08001709 	.word	0x08001709
 8001674:	080016a9 	.word	0x080016a9
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001678:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <RCC_GetClocksFreq+0x1a0>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001680:	0b5b      	lsrs	r3, r3, #13
 8001682:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3301      	adds	r3, #1
 8001688:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
      break;
 8001696:	e047      	b.n	8001728 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a45      	ldr	r2, [pc, #276]	; (80017b0 <RCC_GetClocksFreq+0x1a4>)
 800169c:	601a      	str	r2, [r3, #0]
      break;
 800169e:	e043      	b.n	8001728 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a44      	ldr	r2, [pc, #272]	; (80017b4 <RCC_GetClocksFreq+0x1a8>)
 80016a4:	601a      	str	r2, [r3, #0]
      break;
 80016a6:	e03f      	b.n	8001728 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80016a8:	4b40      	ldr	r3, [pc, #256]	; (80017ac <RCC_GetClocksFreq+0x1a0>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80016b0:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80016b2:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <RCC_GetClocksFreq+0x1a0>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016ba:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	4a3d      	ldr	r2, [pc, #244]	; (80017b8 <RCC_GetClocksFreq+0x1ac>)
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	0d9b      	lsrs	r3, r3, #22
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <RCC_GetClocksFreq+0x1a0>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	4a33      	ldr	r2, [pc, #204]	; (80017b0 <RCC_GetClocksFreq+0x1a4>)
 80016e4:	fb02 f203 	mul.w	r2, r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80016f2:	e019      	b.n	8001728 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	4a2f      	ldr	r2, [pc, #188]	; (80017b4 <RCC_GetClocksFreq+0x1a8>)
 80016f8:	fb02 f203 	mul.w	r2, r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
      }
      break;
 8001706:	e00f      	b.n	8001728 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <RCC_GetClocksFreq+0x1a0>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001710:	0b5b      	lsrs	r3, r3, #13
 8001712:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3301      	adds	r3, #1
 8001718:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
      break;
 8001726:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001728:	4b20      	ldr	r3, [pc, #128]	; (80017ac <RCC_GetClocksFreq+0x1a0>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001730:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8001738:	4a20      	ldr	r2, [pc, #128]	; (80017bc <RCC_GetClocksFreq+0x1b0>)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	40da      	lsrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <RCC_GetClocksFreq+0x1a0>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001758:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001760:	4a16      	ldr	r2, [pc, #88]	; (80017bc <RCC_GetClocksFreq+0x1b0>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	40da      	lsrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <RCC_GetClocksFreq+0x1a0>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001780:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	0adb      	lsrs	r3, r3, #11
 8001786:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001788:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <RCC_GetClocksFreq+0x1b0>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	40da      	lsrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	60da      	str	r2, [r3, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3724      	adds	r7, #36	; 0x24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	00f42400 	.word	0x00f42400
 80017b4:	007a1200 	.word	0x007a1200
 80017b8:	20000000 	.word	0x20000000
 80017bc:	2000000c 	.word	0x2000000c

080017c0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80017d2:	4909      	ldr	r1, [pc, #36]	; (80017f8 <RCC_AHBPeriphClockCmd+0x38>)
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <RCC_AHBPeriphClockCmd+0x38>)
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80017de:	e006      	b.n	80017ee <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80017e0:	4905      	ldr	r1, [pc, #20]	; (80017f8 <RCC_AHBPeriphClockCmd+0x38>)
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <RCC_AHBPeriphClockCmd+0x38>)
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4013      	ands	r3, r2
 80017ec:	61cb      	str	r3, [r1, #28]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40023800 	.word	0x40023800

080017fc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800180e:	4909      	ldr	r1, [pc, #36]	; (8001834 <RCC_APB2PeriphClockCmd+0x38>)
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <RCC_APB2PeriphClockCmd+0x38>)
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4313      	orrs	r3, r2
 8001818:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800181a:	e006      	b.n	800182a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800181c:	4905      	ldr	r1, [pc, #20]	; (8001834 <RCC_APB2PeriphClockCmd+0x38>)
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <RCC_APB2PeriphClockCmd+0x38>)
 8001820:	6a1a      	ldr	r2, [r3, #32]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	43db      	mvns	r3, r3
 8001826:	4013      	ands	r3, r2
 8001828:	620b      	str	r3, [r1, #32]
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40023800 	.word	0x40023800

08001838 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800184a:	4909      	ldr	r1, [pc, #36]	; (8001870 <RCC_APB1PeriphClockCmd+0x38>)
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <RCC_APB1PeriphClockCmd+0x38>)
 800184e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4313      	orrs	r3, r2
 8001854:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001856:	e006      	b.n	8001866 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <RCC_APB1PeriphClockCmd+0x38>)
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <RCC_APB1PeriphClockCmd+0x38>)
 800185c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	43db      	mvns	r3, r3
 8001862:	4013      	ands	r3, r2
 8001864:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40023800 	.word	0x40023800

08001874 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	b2db      	uxtb	r3, r3
 8001890:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d103      	bne.n	80018a0 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <RCC_GetFlagStatus+0x60>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e002      	b.n	80018a6 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <RCC_GetFlagStatus+0x60>)
 80018a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 80018be:	2301      	movs	r3, #1
 80018c0:	74fb      	strb	r3, [r7, #19]
 80018c2:	e001      	b.n	80018c8 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80018c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40023800 	.word	0x40023800

080018d8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	8a1b      	ldrh	r3, [r3, #16]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001900:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	88db      	ldrh	r3, [r3, #6]
 8001906:	461a      	mov	r2, r3
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	4313      	orrs	r3, r2
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	899b      	ldrh	r3, [r3, #12]
 800191a:	b29b      	uxth	r3, r3
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001924:	f023 030c 	bic.w	r3, r3, #12
 8001928:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	889a      	ldrh	r2, [r3, #4]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	891b      	ldrh	r3, [r3, #8]
 8001932:	4313      	orrs	r3, r2
 8001934:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800193a:	4313      	orrs	r3, r2
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	4313      	orrs	r3, r2
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	b29a      	uxth	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	8a9b      	ldrh	r3, [r3, #20]
 8001952:	b29b      	uxth	r3, r3
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800195c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	899b      	ldrh	r3, [r3, #12]
 8001962:	461a      	mov	r2, r3
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	4313      	orrs	r3, r2
 8001968:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fe48 	bl	800160c <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a2e      	ldr	r2, [pc, #184]	; (8001a38 <USART_Init+0x160>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d102      	bne.n	800198a <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	e001      	b.n	800198e <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	899b      	ldrh	r3, [r3, #12]
 8001992:	b29b      	uxth	r3, r3
 8001994:	b21b      	sxth	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	da0c      	bge.n	80019b4 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800199a:	6a3a      	ldr	r2, [r7, #32]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	009a      	lsls	r2, r3, #2
 80019a4:	441a      	add	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e00b      	b.n	80019cc <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80019b4:	6a3a      	ldr	r2, [r7, #32]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	441a      	add	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <USART_Init+0x164>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	2264      	movs	r2, #100	; 0x64
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	899b      	ldrh	r3, [r3, #12]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da0c      	bge.n	8001a10 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	3332      	adds	r3, #50	; 0x32
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <USART_Init+0x164>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	e00b      	b.n	8001a28 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	3332      	adds	r3, #50	; 0x32
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <USART_Init+0x164>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	4313      	orrs	r3, r2
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	811a      	strh	r2, [r3, #8]
}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	51eb851f 	.word	0x51eb851f

08001a40 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	899b      	ldrh	r3, [r3, #12]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001a62:	e007      	b.n	8001a74 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	899b      	ldrh	r3, [r3, #12]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	819a      	strh	r2, [r3, #12]
  }
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	809a      	strh	r2, [r3, #4]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	889b      	ldrh	r3, [r3, #4]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ab6:	b29b      	uxth	r3, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001afa:	2201      	movs	r2, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d103      	bne.n	8001b12 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e009      	b.n	8001b26 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d103      	bne.n	8001b20 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3310      	adds	r3, #16
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e002      	b.n	8001b26 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3314      	adds	r3, #20
 8001b24:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001b26:	787b      	ldrb	r3, [r7, #1]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	6811      	ldr	r1, [r2, #0]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001b38:	e006      	b.n	8001b48 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	6811      	ldr	r1, [r2, #0]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	43d2      	mvns	r2, r2
 8001b44:	400a      	ands	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
  }
}
 8001b48:	bf00      	nop
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop

08001b54 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop

08001b8c <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	095b      	lsrs	r3, r3, #5
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d107      	bne.n	8001bda <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	899b      	ldrh	r3, [r3, #12]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e011      	b.n	8001bfe <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d107      	bne.n	8001bf0 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	8a1b      	ldrh	r3, [r3, #16]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4013      	ands	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e006      	b.n	8001bfe <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	8a9b      	ldrh	r3, [r3, #20]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001c06:	2201      	movs	r2, #1
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <USART_GetITStatus+0xa4>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	74fb      	strb	r3, [r7, #19]
 8001c2e:	e001      	b.n	8001c34 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001c34:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	81fb      	strh	r3, [r7, #14]
 8001c50:	2300      	movs	r3, #0
 8001c52:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001c5a:	89fb      	ldrh	r3, [r7, #14]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001c64:	89bb      	ldrh	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	801a      	strh	r2, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <main>:
*/
#include "vrs_cv5.h"



int main(void){
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0

  AD_value=3442;
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <main+0xa8>)
 8001c80:	f640 5272 	movw	r2, #3442	; 0xd72
 8001c84:	801a      	strh	r2, [r3, #0]
  In=0;
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <main+0xac>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	801a      	strh	r2, [r3, #0]

  adc_init();
 8001c8c:	f000 fa60 	bl	8002150 <adc_init>
  init_LED();
 8001c90:	f000 fabc 	bl	800220c <init_LED>
  init_USART();
 8001c94:	f000 faec 	bl	8002270 <init_USART>
  init_NVIC();
 8001c98:	f000 fad2 	bl	8002240 <init_NVIC>
  char res[10];

  char format='0';
 8001c9c:	2330      	movs	r3, #48	; 0x30
 8001c9e:	73fb      	strb	r3, [r7, #15]

  while(1){

	  if(In=='m'){
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <main+0xac>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	2b6d      	cmp	r3, #109	; 0x6d
 8001ca6:	d109      	bne.n	8001cbc <main+0x44>
		  format=(format=='0' ? '1':'0');
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b30      	cmp	r3, #48	; 0x30
 8001cac:	d101      	bne.n	8001cb2 <main+0x3a>
 8001cae:	2331      	movs	r3, #49	; 0x31
 8001cb0:	e000      	b.n	8001cb4 <main+0x3c>
 8001cb2:	2330      	movs	r3, #48	; 0x30
 8001cb4:	73fb      	strb	r3, [r7, #15]
		  In=0;
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <main+0xac>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	801a      	strh	r2, [r3, #0]
	  }
	  if(format=='0'){
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	2b30      	cmp	r3, #48	; 0x30
 8001cc0:	d10c      	bne.n	8001cdc <main+0x64>
		  sprintf(res,"%d",AD_value);
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <main+0xa8>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4917      	ldr	r1, [pc, #92]	; (8001d28 <main+0xb0>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 fa29 	bl	8002124 <siprintf>
		  posli(res);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fb53 	bl	8002380 <posli>
 8001cda:	e7e1      	b.n	8001ca0 <main+0x28>
	  }
	  else{
		  format_3V((3.3/4096)*AD_value,res);
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <main+0xa8>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fb9f 	bl	8000424 <__aeabi_i2d>
 8001ce6:	a30c      	add	r3, pc, #48	; (adr r3, 8001d18 <main+0xa0>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fc00 	bl	80004f0 <__aeabi_dmul>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	f7fe fe0c 	bl	8000914 <__aeabi_d2f>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 fb70 	bl	80023e8 <format_3V>
		  posli(res);
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fb38 	bl	8002380 <posli>
	  }
	 //casovac(AD_value);
  }
 8001d10:	e7c6      	b.n	8001ca0 <main+0x28>
 8001d12:	bf00      	nop
 8001d14:	f3af 8000 	nop.w
 8001d18:	66666666 	.word	0x66666666
 8001d1c:	3f4a6666 	.word	0x3f4a6666
 8001d20:	20000038 	.word	0x20000038
 8001d24:	2000003a 	.word	0x2000003a
 8001d28:	080024a4 	.word	0x080024a4

08001d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d32:	e003      	b.n	8001d3c <LoopCopyDataInit>

08001d34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001d36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d3a:	3104      	adds	r1, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001d40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d44:	d3f6      	bcc.n	8001d34 <CopyDataInit>
  ldr r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001d48:	e002      	b.n	8001d50 <LoopFillZerobss>

08001d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d4c:	f842 3b04 	str.w	r3, [r2], #4

08001d50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001d52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d54:	d3f9      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d56:	f000 f841 	bl	8001ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f000 fb71 	bl	8002440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5e:	f7ff ff8b 	bl	8001c78 <main>
  bx lr
 8001d62:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d64:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001d68:	080024b8 	.word	0x080024b8
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d70:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001d74:	2000001c 	.word	0x2000001c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001d78:	2000003c 	.word	0x2000003c

08001d7c <AES_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <AES_IRQHandler>
	...

08001d80 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001d90:	e7fe      	b.n	8001d90 <HardFault_Handler+0x4>
 8001d92:	bf00      	nop

08001d94 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001d98:	e7fe      	b.n	8001d98 <MemManage_Handler+0x4>
 8001d9a:	bf00      	nop

08001d9c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001da0:	e7fe      	b.n	8001da0 <BusFault_Handler+0x4>
 8001da2:	bf00      	nop

08001da4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001da8:	e7fe      	b.n	8001da8 <UsageFault_Handler+0x4>
 8001daa:	bf00      	nop

08001dac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <SystemInit+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <SystemInit+0x5c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001dec:	4912      	ldr	r1, [pc, #72]	; (8001e38 <SystemInit+0x5c>)
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <SystemInit+0x5c>)
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <SystemInit+0x60>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001df8:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <SystemInit+0x5c>)
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <SystemInit+0x5c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001e02:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001e06:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e08:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <SystemInit+0x5c>)
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <SystemInit+0x5c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e12:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001e14:	4a08      	ldr	r2, [pc, #32]	; (8001e38 <SystemInit+0x5c>)
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <SystemInit+0x5c>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001e1e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SystemInit+0x5c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001e26:	f000 f80d 	bl	8001e44 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SystemInit+0x64>)
 8001e2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e30:	609a      	str	r2, [r3, #8]
#endif
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	88ffc00c 	.word	0x88ffc00c
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001e52:	4a41      	ldr	r2, [pc, #260]	; (8001f58 <SetSysClock+0x114>)
 8001e54:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <SetSysClock+0x114>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001e5e:	4b3e      	ldr	r3, [pc, #248]	; (8001f58 <SetSysClock+0x114>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d103      	bne.n	8001e7c <SetSysClock+0x38>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e7a:	d1f0      	bne.n	8001e5e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <SetSysClock+0x114>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	e001      	b.n	8001e92 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d15a      	bne.n	8001f4e <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <SetSysClock+0x118>)
 8001e9a:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <SetSysClock+0x118>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001ea4:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <SetSysClock+0x118>)
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <SetSysClock+0x118>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <SetSysClock+0x118>)
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <SetSysClock+0x118>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001ebc:	4a26      	ldr	r2, [pc, #152]	; (8001f58 <SetSysClock+0x114>)
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <SetSysClock+0x114>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <SetSysClock+0x11c>)
 8001eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ece:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001ed0:	bf00      	nop
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <SetSysClock+0x11c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001ede:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <SetSysClock+0x114>)
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <SetSysClock+0x114>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <SetSysClock+0x114>)
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <SetSysClock+0x114>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <SetSysClock+0x114>)
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <SetSysClock+0x114>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <SetSysClock+0x114>)
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <SetSysClock+0x114>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001f00:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <SetSysClock+0x114>)
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <SetSysClock+0x114>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001f0c:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <SetSysClock+0x114>)
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <SetSysClock+0x114>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f18:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001f1a:	bf00      	nop
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <SetSysClock+0x114>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f9      	beq.n	8001f1c <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001f28:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <SetSysClock+0x114>)
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <SetSysClock+0x114>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001f34:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <SetSysClock+0x114>)
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <SetSysClock+0x114>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f043 0303 	orr.w	r3, r3, #3
 8001f3e:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001f40:	bf00      	nop
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <SetSysClock+0x114>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d1f9      	bne.n	8001f42 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40023c00 	.word	0x40023c00
 8001f60:	40007000 	.word	0x40007000

08001f64 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001f74:	e004      	b.n	8001f80 <ts_itoa+0x1c>
		div *= base;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d2f3      	bcs.n	8001f76 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 8001f8e:	e029      	b.n	8001fe4 <ts_itoa+0x80>
	{
		int num = d/div;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	613b      	str	r3, [r7, #16]
		d = d%div;
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fa2:	fb02 f201 	mul.w	r2, r2, r1
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b09      	cmp	r3, #9
 8001fb8:	dd0a      	ble.n	8001fd0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	1c59      	adds	r1, r3, #1
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	6011      	str	r1, [r2, #0]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	3237      	adds	r2, #55	; 0x37
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	e009      	b.n	8001fe4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	1c59      	adds	r1, r3, #1
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	6011      	str	r1, [r2, #0]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	3230      	adds	r2, #48	; 0x30
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1d2      	bne.n	8001f90 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8002004:	e07d      	b.n	8002102 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b25      	cmp	r3, #37	; 0x25
 800200c:	d171      	bne.n	80020f2 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3301      	adds	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b64      	cmp	r3, #100	; 0x64
 800201a:	d01e      	beq.n	800205a <ts_formatstring+0x66>
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	dc06      	bgt.n	800202e <ts_formatstring+0x3a>
 8002020:	2b58      	cmp	r3, #88	; 0x58
 8002022:	d050      	beq.n	80020c6 <ts_formatstring+0xd2>
 8002024:	2b63      	cmp	r3, #99	; 0x63
 8002026:	d00e      	beq.n	8002046 <ts_formatstring+0x52>
 8002028:	2b25      	cmp	r3, #37	; 0x25
 800202a:	d058      	beq.n	80020de <ts_formatstring+0xea>
 800202c:	e05d      	b.n	80020ea <ts_formatstring+0xf6>
 800202e:	2b73      	cmp	r3, #115	; 0x73
 8002030:	d02b      	beq.n	800208a <ts_formatstring+0x96>
 8002032:	2b73      	cmp	r3, #115	; 0x73
 8002034:	dc02      	bgt.n	800203c <ts_formatstring+0x48>
 8002036:	2b69      	cmp	r3, #105	; 0x69
 8002038:	d00f      	beq.n	800205a <ts_formatstring+0x66>
 800203a:	e056      	b.n	80020ea <ts_formatstring+0xf6>
 800203c:	2b75      	cmp	r3, #117	; 0x75
 800203e:	d037      	beq.n	80020b0 <ts_formatstring+0xbc>
 8002040:	2b78      	cmp	r3, #120	; 0x78
 8002042:	d040      	beq.n	80020c6 <ts_formatstring+0xd2>
 8002044:	e051      	b.n	80020ea <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	60fa      	str	r2, [r7, #12]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	1d11      	adds	r1, r2, #4
 8002050:	6079      	str	r1, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]
				break;
 8002058:	e047      	b.n	80020ea <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	1d1a      	adds	r2, r3, #4
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	da07      	bge.n	800207a <ts_formatstring+0x86>
					{
						val *= -1;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	425b      	negs	r3, r3
 800206e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	60fa      	str	r2, [r7, #12]
 8002076:	222d      	movs	r2, #45	; 0x2d
 8002078:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800207a:	69f9      	ldr	r1, [r7, #28]
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	220a      	movs	r2, #10
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff6e 	bl	8001f64 <ts_itoa>
				}
				break;
 8002088:	e02f      	b.n	80020ea <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	1d1a      	adds	r2, r3, #4
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8002094:	e007      	b.n	80020a6 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	60fa      	str	r2, [r7, #12]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	1c51      	adds	r1, r2, #1
 80020a0:	61b9      	str	r1, [r7, #24]
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f3      	bne.n	8002096 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 80020ae:	e01c      	b.n	80020ea <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1d1a      	adds	r2, r3, #4
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	220a      	movs	r2, #10
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff50 	bl	8001f64 <ts_itoa>
				break;
 80020c4:	e011      	b.n	80020ea <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	1d1a      	adds	r2, r3, #4
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2210      	movs	r2, #16
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff44 	bl	8001f64 <ts_itoa>
				break;
 80020dc:	e005      	b.n	80020ea <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	60fa      	str	r2, [r7, #12]
 80020e4:	2225      	movs	r2, #37	; 0x25
 80020e6:	701a      	strb	r2, [r3, #0]
				  break;
 80020e8:	bf00      	nop
			}
			fmt++;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	e007      	b.n	8002102 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	60fa      	str	r2, [r7, #12]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	1c51      	adds	r1, r2, #1
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f47f af7d 	bne.w	8002006 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	461a      	mov	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	1ad3      	subs	r3, r2, r3
}
 800211a:	4618      	mov	r0, r3
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop

08002124 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8002124:	b40e      	push	{r1, r2, r3}
 8002126:	b580      	push	{r7, lr}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	69f9      	ldr	r1, [r7, #28]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff5b 	bl	8001ff4 <ts_formatstring>
 800213e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8002140:	68fb      	ldr	r3, [r7, #12]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800214c:	b003      	add	sp, #12
 800214e:	4770      	bx	lr

08002150 <adc_init>:
 */

#include "vrs_cv5.h"

void adc_init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStructure;
 ADC_InitTypeDef ADC_InitStructure;

 RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002156:	2101      	movs	r1, #1
 8002158:	2001      	movs	r0, #1
 800215a:	f7ff fb31 	bl	80017c0 <RCC_AHBPeriphClockCmd>
 /* Configure ADCx Channel 2 as analog input */
 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 ;
 800215e:	2301      	movs	r3, #1
 8002160:	61bb      	str	r3, [r7, #24]
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002162:	2303      	movs	r3, #3
 8002164:	773b      	strb	r3, [r7, #28]
 GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8002166:	2300      	movs	r3, #0
 8002168:	77fb      	strb	r3, [r7, #31]
 GPIO_Init(GPIOC, &GPIO_InitStructure);
 800216a:	f107 0318 	add.w	r3, r7, #24
 800216e:	4619      	mov	r1, r3
 8002170:	4824      	ldr	r0, [pc, #144]	; (8002204 <adc_init+0xb4>)
 8002172:	f7ff f95d 	bl	8001430 <GPIO_Init>
/* Enable the HSI oscillator */
 RCC_HSICmd(ENABLE);
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff fa38 	bl	80015ec <RCC_HSICmd>
/* Check that HSI oscillator is ready */
 while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 800217c:	bf00      	nop
 800217e:	2021      	movs	r0, #33	; 0x21
 8002180:	f7ff fb78 	bl	8001874 <RCC_GetFlagStatus>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f9      	beq.n	800217e <adc_init+0x2e>
 /* Enable ADC clock */
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800218a:	2101      	movs	r1, #1
 800218c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002190:	f7ff fb34 	bl	80017fc <RCC_APB2PeriphClockCmd>
 /* Initialize ADC structure */
 ADC_StructInit(&ADC_InitStructure);
 8002194:	463b      	mov	r3, r7
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ff56 	bl	8001048 <ADC_StructInit>
 /* ADC1 configuration */
 ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800219c:	2300      	movs	r3, #0
 800219e:	603b      	str	r3, [r7, #0]
 ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	717b      	strb	r3, [r7, #5]
 ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
 ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
 ADC_InitStructure.ADC_NbrOfConversion = 1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	753b      	strb	r3, [r7, #20]

 ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 80021b0:	2201      	movs	r2, #1
 80021b2:	f240 2105 	movw	r1, #517	; 0x205
 80021b6:	4814      	ldr	r0, [pc, #80]	; (8002208 <adc_init+0xb8>)
 80021b8:	f7ff f8f8 	bl	80013ac <ADC_ITConfig>
 ADC_ITConfig(ADC1, ADC_IT_OVR, ENABLE);
 80021bc:	2201      	movs	r2, #1
 80021be:	f242 011a 	movw	r1, #8218	; 0x201a
 80021c2:	4811      	ldr	r0, [pc, #68]	; (8002208 <adc_init+0xb8>)
 80021c4:	f7ff f8f2 	bl	80013ac <ADC_ITConfig>

 ADC_Init(ADC1, &ADC_InitStructure);
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	480e      	ldr	r0, [pc, #56]	; (8002208 <adc_init+0xb8>)
 80021ce:	f7fe fee7 	bl	8000fa0 <ADC_Init>
/* ADCx regular channel8 configuration */
 ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_16Cycles);
 80021d2:	2302      	movs	r3, #2
 80021d4:	2201      	movs	r2, #1
 80021d6:	2100      	movs	r1, #0
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <adc_init+0xb8>)
 80021da:	f7fe ff71 	bl	80010c0 <ADC_RegularChannelConfig>
 /* Enable the ADC */
 ADC_Cmd(ADC1, ENABLE);
 80021de:	2101      	movs	r1, #1
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <adc_init+0xb8>)
 80021e2:	f7fe ff51 	bl	8001088 <ADC_Cmd>
 /* Wait until the ADC1 is ready */
 while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET)
 80021e6:	bf00      	nop
 80021e8:	2140      	movs	r1, #64	; 0x40
 80021ea:	4807      	ldr	r0, [pc, #28]	; (8002208 <adc_init+0xb8>)
 80021ec:	f7ff f906 	bl	80013fc <ADC_GetFlagStatus>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f8      	beq.n	80021e8 <adc_init+0x98>
 {
 }
 /* Start ADC Software Conversion */
 ADC_SoftwareStartConv(ADC1);
 80021f6:	4804      	ldr	r0, [pc, #16]	; (8002208 <adc_init+0xb8>)
 80021f8:	f7ff f8c8 	bl	800138c <ADC_SoftwareStartConv>
}
 80021fc:	bf00      	nop
 80021fe:	3720      	adds	r7, #32
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40020800 	.word	0x40020800
 8002208:	40012400 	.word	0x40012400

0800220c <init_LED>:

//init LEDky
void init_LED(void){
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8002212:	2101      	movs	r1, #1
 8002214:	2001      	movs	r0, #1
 8002216:	f7ff fad3 	bl	80017c0 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 800221a:	2301      	movs	r3, #1
 800221c:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 800221e:	2300      	movs	r3, #0
 8002220:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_5;
 8002222:	2320      	movs	r3, #32
 8002224:	603b      	str	r3, [r7, #0]
	gpioInitStruc.GPIO_Speed=GPIO_Speed_400KHz;
 8002226:	2300      	movs	r3, #0
 8002228:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOA,&gpioInitStruc);
 800222a:	463b      	mov	r3, r7
 800222c:	4619      	mov	r1, r3
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <init_LED+0x30>)
 8002230:	f7ff f8fe 	bl	8001430 <GPIO_Init>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40020000 	.word	0x40020000

08002240 <init_NVIC>:

//init preruseni z prevodnika
void init_NVIC(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8002246:	f44f 7040 	mov.w	r0, #768	; 0x300
 800224a:	f7fe fe37 	bl	8000ebc <NVIC_PriorityGroupConfig>
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
 800224e:	2312      	movs	r3, #18
 8002250:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4; //priorita nizsia nez pre USART
 8002252:	2304      	movs	r3, #4
 8002254:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800225a:	2301      	movs	r3, #1
 800225c:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fe3d 	bl	8000ee0 <NVIC_Init>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop

08002270 <init_USART>:

// init GPIO pre RX a TX, nastavenie USART, nastavenie preruseni
void init_USART(){
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_usrt;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002276:	2101      	movs	r1, #1
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff faa1 	bl	80017c0 <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 800227e:	2207      	movs	r2, #7
 8002280:	2102      	movs	r1, #2
 8002282:	4825      	ldr	r0, [pc, #148]	; (8002318 <init_USART+0xa8>)
 8002284:	f7ff f96a 	bl	800155c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8002288:	2207      	movs	r2, #7
 800228a:	2103      	movs	r1, #3
 800228c:	4822      	ldr	r0, [pc, #136]	; (8002318 <init_USART+0xa8>)
 800228e:	f7ff f965 	bl	800155c <GPIO_PinAFConfig>

	//GPIO pre RX a TX
	GPIO_usrt.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8002292:	230c      	movs	r3, #12
 8002294:	61bb      	str	r3, [r7, #24]
	GPIO_usrt.GPIO_Mode = GPIO_Mode_AF;
 8002296:	2302      	movs	r3, #2
 8002298:	773b      	strb	r3, [r7, #28]
	GPIO_usrt.GPIO_OType = GPIO_OType_PP;
 800229a:	2300      	movs	r3, #0
 800229c:	77bb      	strb	r3, [r7, #30]
	GPIO_usrt.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	77fb      	strb	r3, [r7, #31]
	GPIO_usrt.GPIO_Speed = GPIO_Speed_40MHz;
 80022a2:	2303      	movs	r3, #3
 80022a4:	777b      	strb	r3, [r7, #29]

	GPIO_Init(GPIOA,&GPIO_usrt);
 80022a6:	f107 0318 	add.w	r3, r7, #24
 80022aa:	4619      	mov	r1, r3
 80022ac:	481a      	ldr	r0, [pc, #104]	; (8002318 <init_USART+0xa8>)
 80022ae:	f7ff f8bf 	bl	8001430 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80022b2:	2101      	movs	r1, #1
 80022b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80022b8:	f7ff fabe 	bl	8001838 <RCC_APB1PeriphClockCmd>

	//nastavenie USART
	USART_InitStructure.USART_BaudRate = 9600*2;
 80022bc:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80022c0:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80022c2:	2300      	movs	r3, #0
 80022c4:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80022ca:	2300      	movs	r3, #0
 80022cc:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80022ce:	2300      	movs	r3, #0
 80022d0:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80022d2:	230c      	movs	r3, #12
 80022d4:	827b      	strh	r3, [r7, #18]
	USART_Init(USART2, &USART_InitStructure);
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	4619      	mov	r1, r3
 80022dc:	480f      	ldr	r0, [pc, #60]	; (800231c <init_USART+0xac>)
 80022de:	f7ff fafb 	bl	80018d8 <USART_Init>

	//nastavenie preruseni pre USART
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80022e2:	2326      	movs	r3, #38	; 0x26
 80022e4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fdf3 	bl	8000ee0 <NVIC_Init>

	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80022fa:	2201      	movs	r2, #1
 80022fc:	f240 5125 	movw	r1, #1317	; 0x525
 8002300:	4806      	ldr	r0, [pc, #24]	; (800231c <init_USART+0xac>)
 8002302:	f7ff fbdf 	bl	8001ac4 <USART_ITConfig>
	USART_Cmd(USART2, ENABLE);
 8002306:	2101      	movs	r1, #1
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <init_USART+0xac>)
 800230a:	f7ff fb99 	bl	8001a40 <USART_Cmd>

}
 800230e:	bf00      	nop
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40020000 	.word	0x40020000
 800231c:	40004400 	.word	0x40004400

08002320 <ADC1_IRQHandler>:

//handler pre prerusenia prevodnika
void ADC1_IRQHandler(void){
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
	//while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC | ADC_FLAG_OVR)!=RESET){}
	if(ADC1->SR && ADC_SR_EOC){
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <ADC1_IRQHandler+0x20>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <ADC1_IRQHandler+0x16>
		AD_value = ADC1->DR;
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <ADC1_IRQHandler+0x20>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <ADC1_IRQHandler+0x24>)
 8002334:	801a      	strh	r2, [r3, #0]
	}

}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40012400 	.word	0x40012400
 8002344:	20000038 	.word	0x20000038

08002348 <USART2_IRQHandler>:

//handler pre prerusenia USART
void USART2_IRQHandler(void){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET){
 800234c:	f240 5125 	movw	r1, #1317	; 0x525
 8002350:	4809      	ldr	r0, [pc, #36]	; (8002378 <USART2_IRQHandler+0x30>)
 8002352:	f7ff fc1b 	bl	8001b8c <USART_GetITStatus>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00b      	beq.n	8002374 <USART2_IRQHandler+0x2c>
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800235c:	f240 5125 	movw	r1, #1317	; 0x525
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <USART2_IRQHandler+0x30>)
 8002362:	f7ff fc6d 	bl	8001c40 <USART_ClearITPendingBit>
		In = USART_ReceiveData(USART2);
 8002366:	4804      	ldr	r0, [pc, #16]	; (8002378 <USART2_IRQHandler+0x30>)
 8002368:	f7ff fb9c 	bl	8001aa4 <USART_ReceiveData>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	4b02      	ldr	r3, [pc, #8]	; (800237c <USART2_IRQHandler+0x34>)
 8002372:	801a      	strh	r2, [r3, #0]
    }
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40004400 	.word	0x40004400
 800237c:	2000003a 	.word	0x2000003a

08002380 <posli>:
		GPIO_SetBits(GPIOA, GPIO_Pin_5);
	}
}

//posielanie stringu po znakoch
void posli(char *res){
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	int index =0;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
	while(res[index] != '\0')
 800238c:	e013      	b.n	80023b6 <posli+0x36>
	{
		USART_SendData(USART2, res[index]);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	4619      	mov	r1, r3
 800239a:	4812      	ldr	r0, [pc, #72]	; (80023e4 <posli+0x64>)
 800239c:	f7ff fb70 	bl	8001a80 <USART_SendData>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 80023a0:	bf00      	nop
 80023a2:	2140      	movs	r1, #64	; 0x40
 80023a4:	480f      	ldr	r0, [pc, #60]	; (80023e4 <posli+0x64>)
 80023a6:	f7ff fbd5 	bl	8001b54 <USART_GetFlagStatus>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f8      	beq.n	80023a2 <posli+0x22>
		index++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
}

//posielanie stringu po znakoch
void posli(char *res){
	int index =0;
	while(res[index] != '\0')
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e5      	bne.n	800238e <posli+0xe>
	{
		USART_SendData(USART2, res[index]);
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
		index++;
	}
	USART_SendData(USART2,' ');
 80023c2:	2120      	movs	r1, #32
 80023c4:	4807      	ldr	r0, [pc, #28]	; (80023e4 <posli+0x64>)
 80023c6:	f7ff fb5b 	bl	8001a80 <USART_SendData>
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 80023ca:	bf00      	nop
 80023cc:	2140      	movs	r1, #64	; 0x40
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <posli+0x64>)
 80023d0:	f7ff fbc0 	bl	8001b54 <USART_GetFlagStatus>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f8      	beq.n	80023cc <posli+0x4c>
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40004400 	.word	0x40004400

080023e8 <format_3V>:

//prevod float do stringu
void format_3V(float number, char *res)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
	int full=(int)number;
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe fd3c 	bl	8000e70 <__aeabi_f2iz>
 80023f8:	4603      	mov	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]
	int decimal= (int) ((number-full)*1000);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7fe fb93 	bl	8000b28 <__aeabi_i2f>
 8002402:	4603      	mov	r3, r0
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fad8 	bl	80009bc <__aeabi_fsub>
 800240c:	4603      	mov	r3, r0
 800240e:	490a      	ldr	r1, [pc, #40]	; (8002438 <format_3V+0x50>)
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fbdd 	bl	8000bd0 <__aeabi_fmul>
 8002416:	4603      	mov	r3, r0
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fd29 	bl	8000e70 <__aeabi_f2iz>
 800241e:	4603      	mov	r3, r0
 8002420:	60bb      	str	r3, [r7, #8]
	sprintf(res,"%d.%dV",full,decimal);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4905      	ldr	r1, [pc, #20]	; (800243c <format_3V+0x54>)
 8002428:	6838      	ldr	r0, [r7, #0]
 800242a:	f7ff fe7b 	bl	8002124 <siprintf>
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	447a0000 	.word	0x447a0000
 800243c:	080024a8 	.word	0x080024a8

08002440 <__libc_init_array>:
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <__libc_init_array+0x3c>)
 8002442:	b570      	push	{r4, r5, r6, lr}
 8002444:	461e      	mov	r6, r3
 8002446:	4c0e      	ldr	r4, [pc, #56]	; (8002480 <__libc_init_array+0x40>)
 8002448:	2500      	movs	r5, #0
 800244a:	1ae4      	subs	r4, r4, r3
 800244c:	10a4      	asrs	r4, r4, #2
 800244e:	42a5      	cmp	r5, r4
 8002450:	d004      	beq.n	800245c <__libc_init_array+0x1c>
 8002452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002456:	4798      	blx	r3
 8002458:	3501      	adds	r5, #1
 800245a:	e7f8      	b.n	800244e <__libc_init_array+0xe>
 800245c:	f000 f816 	bl	800248c <_init>
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <__libc_init_array+0x44>)
 8002462:	4c09      	ldr	r4, [pc, #36]	; (8002488 <__libc_init_array+0x48>)
 8002464:	461e      	mov	r6, r3
 8002466:	1ae4      	subs	r4, r4, r3
 8002468:	10a4      	asrs	r4, r4, #2
 800246a:	2500      	movs	r5, #0
 800246c:	42a5      	cmp	r5, r4
 800246e:	d004      	beq.n	800247a <__libc_init_array+0x3a>
 8002470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002474:	4798      	blx	r3
 8002476:	3501      	adds	r5, #1
 8002478:	e7f8      	b.n	800246c <__libc_init_array+0x2c>
 800247a:	bd70      	pop	{r4, r5, r6, pc}
 800247c:	080024b0 	.word	0x080024b0
 8002480:	080024b0 	.word	0x080024b0
 8002484:	080024b0 	.word	0x080024b0
 8002488:	080024b4 	.word	0x080024b4

0800248c <_init>:
 800248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248e:	bf00      	nop
 8002490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002492:	bc08      	pop	{r3}
 8002494:	469e      	mov	lr, r3
 8002496:	4770      	bx	lr

08002498 <_fini>:
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	bf00      	nop
 800249c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249e:	bc08      	pop	{r3}
 80024a0:	469e      	mov	lr, r3
 80024a2:	4770      	bx	lr
